package hello.hello_spring.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {
    @GetMapping("/")
    public String home(){
        return "home";
    }
}

<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<body>
<div class="container">
    <div>
        <h1>Hello Spring</h1>
        <p>회원 기능</p>
        <p>
            <a
                    href="/members/new">회원 가입</a>
            <a
                    href="/members">회원 목록</a>
        </p>
    </div>
</div> <!-- /container -->
</body>
</html>

package hello.hello_spring.controller;

import hello.hello_spring.domain.Member;
import hello.hello_spring.service.MemberService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class MemberController {
    private final MemberService memberService;
    @Autowired
    public MemberController(MemberService memberService) {
        this.memberService = memberService;
    }

    @GetMapping("/members/new")
    public String createForm(){
        return "members/createMemberForm";

    }

    @PostMapping("/members/new")
    public String create(MemberForm form){
    Member member = new Member();
    member.setName(form.getName());

    memberService.join(member);

    return "redirect:/";
    }
}

<!DOCTYPE HTML>
<html xmlns:th="http://www.thymeleaf.org">
<body>
<div class="container">
    )
    `
    <form action="/members/new" method="post">
        <div
                class="form-group">
            <label
                    for="name">이름</label>
            <input
                    type="text" id="name" name="name" placeholder="이름을 입력하세요">
        </div>
        <button type="submit">등록</button>
    </form>
</div> <!-- /container -->
</body>
</html>

// 웹 등록 화면에서 데이터를 전달 받을 폼 객체
package hello.hello_spring.controller;

public class MemberForm {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

}
// 회원 컨트롤러에서 회원을 실제 등록하는 기능
 @PostMapping("/members/new")
    public String create(MemberForm form){
    Member member = new Member();
    member.setName(form.getName());

    memberService.join(member);

    return "redirect:/";
    }

@GetMapping(value = "/members")
 public String list(Model model) {
 List<Member> members = memberService.findMembers();
    model.addAttribute("members", members);
 return "members/memberList";
 }

<!DOCTYPE HTML>
 <html xmlns:th="http://www.thymeleaf.org">
 <body>
 <div class="container">
    <div>
        <table>
            <thead>
            <tr>
                <th>#</th>
                <th>이름</th>
            </tr>
            </thead>
            <tbody>
            <tr 
th:each="member : ${members}">
                <td 
th:text="${member.id}"></td>
                <td 
            </tr>
            </tbody>
        </table>
    </div>
 th:text="${member.name}"></td>
 </div> <!-- /container -->
 </body>
 </html>

drop table if exists member CASCADE;
 create table member
 (
    id   bigint generated by default as identity,
    name varchar(255),
    primary key (id)
 );

// dependencies에 추가하면 된다.
implementation 'org.springframework.boot:spring-boot-starter-jdbc'
runtimeOnly 'com.h2database:h2'

spring.datasource.url=jdbc:h2:tcp://localhost/~/test
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa

package hello.hellospring.repository;
 import hello.hellospring.domain.Member;
 import org.springframework.jdbc.datasource.DataSourceUtils;
 import javax.sql.DataSource;
 import java.sql.*;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Optional;
public class JdbcMemberRepository implements MemberRepository {
 private final DataSource dataSource;
 public JdbcMemberRepository(DataSource dataSource) {
 this.dataSource = dataSource;
    }
    @Override
 public Member save(Member member) {
 String sql = "insert into member(name) values(?)";
 Connection conn = null;
 PreparedStatement pstmt = null;
 ResultSet rs = null;
 try {
            conn 
= getConnection();
            pstmt 
= conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, member.getName());
            pstmt.executeUpdate();
            rs 
= pstmt.getGeneratedKeys();
 if (rs.next()) {
                member.setId(rs.getLong(1));
            } 
else {
 throw new SQLException("id 조회 실패");
            }
 return member;
        } 
        } 
        }
    }
 catch (Exception e) {
 throw new IllegalStateException(e);
 finally {
 close(conn, pstmt, rs);
    @Override
 public Optional<Member> findById(Long id) {
 String sql = "select * from member where id = ?";
 Connection conn = null;
PreparedStatement pstmt = null;
 ResultSet rs = null;
 try {
            conn 
= getConnection();
            pstmt 
= conn.prepareStatement(sql);
            pstmt.setLong(1, id);
            rs 
= pstmt.executeQuery();
 if(rs.next()) {
 Member member = new Member();
                member.setId(rs.getLong("id"));
                member.setName(rs.getString("name"));
 return Optional.of(member);
            } 
else {
 return Optional.empty();
            }
        } 
        } 
        }
    }
 catch (Exception e) {
 throw new IllegalStateException(e);
 finally {
 close(conn, pstmt, rs);
    @Override
 public List<Member> findAll() {
 String sql = "select * from member";
 Connection conn = null;
 PreparedStatement pstmt = null;
 ResultSet rs = null;
 try {
            conn 
= getConnection();
            pstmt 
= conn.prepareStatement(sql);
            rs 
= pstmt.executeQuery();
 List<Member> members = new ArrayList<>();
 while(rs.next()) {
Member member = new Member();
                member.setId(rs.getLong("id"));
                member.setName(rs.getString("name"));
                members.add(member);
            }
        } 
        } 
        }
    }
 return members;
 catch (Exception e) {
 throw new IllegalStateException(e);
 finally {
 close(conn, pstmt, rs);
    @Override
 public Optional<Member> findByName(String name) {
 String sql = "select * from member where name = ?";
 Connection conn = null;
 PreparedStatement pstmt = null;
 ResultSet rs = null;
 try {
            conn 
= getConnection();
            pstmt 
= conn.prepareStatement(sql);
            pstmt.setString(1, name);
            rs 
= pstmt.executeQuery();
 if(rs.next()) {
 Member member = new Member();
                member.setId(rs.getLong("id"));
                member.setName(rs.getString("name"));
 return Optional.of(member);
            }
 return Optional.empty();
        } 
        } 
        }
 catch (Exception e) {
 throw new IllegalStateException(e);
 finally {
 close(conn, pstmt, rs);
    }
private Connection getConnection() {
 return DataSourceUtils.getConnection(dataSource);
    }
 private void close(Connection conn, PreparedStatement pstmt, ResultSet rs) {
 try {
 if (rs != null) {
                rs.close();
            }
        } 
catch (SQLException e) {
            e.printStackTrace();
        }
 try {
 if (pstmt != null) {
                pstmt.close();
            }
        } 
catch (SQLException e) {
            e.printStackTrace();
        }
 try {
 if (conn != null) {
 close(conn);
            }
        } 
catch (SQLException e) {
            e.printStackTrace();
        }
    }
 private void close(Connection conn) throws SQLException {
 DataSourceUtils.releaseConnection(conn, dataSource);
    }
 }
 package hello.hellospring;
 import hello.hellospring.repository.JdbcMemberRepository;
 import hello.hellospring.repository.JdbcTemplateMemberRepository;
 import hello.hellospring.repository.MemberRepository;
 import hello.hellospring.repository.MemoryMemberRepository;
import hello.hellospring.service.MemberService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import javax.sql.DataSource;
 @Configuration
 public class SpringConfig {
 private final DataSource dataSource;
 public SpringConfig(DataSource dataSource) {
 this.dataSource = dataSource;
    }
    @Bean
 public MemberService memberService() {
 return new MemberService(memberRepository());
    }
    @Bean
 public MemberRepository memberRepository() {
 // return new MemoryMemberRepository();
 return new JdbcMemberRepository(dataSource);
 }
}

package hello.hellospring.service;
 import hello.hellospring.domain.Member;
 import hello.hellospring.repository.MemberRepository;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.transaction.annotation.Transactional;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 @SpringBootTest
 @Transactional
 class MemberServiceIntegrationTest {
    @Autowired MemberService memberService;
    @Autowired MemberRepository memberRepository;
    @Test
 public void 회원가입() throws Exception {
 //Given
 Member member = new Member();
        member.setName("hello");
 //When
 Long saveId = memberService.join(member);
//Then
 Member findMember = memberRepository.findById(saveId).get();
 assertEquals(member.getName(), findMember.getName());
    }
    @Test
 public void 중복_회원_예외() throws Exception {
 //Given
 Member member1 = new Member();
        member1.setName("spring");
 Member member2 = new Member();
        member2.setName("spring");
 //When
        memberService.join(member1);
 IllegalStateException e = assertThrows(IllegalStateException.class,
                () -> memberService.join(member2));//예외가 발생해야 한다.
 assertThat(e.getMessage()).isEqualTo("이미 존재하는 회원입니다.");
    }
 }

package hello.hellospring.repository;
import hello.hellospring.domain.Member;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.core.RowMapper;
 import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
 import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
 import javax.sql.DataSource;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 public class JdbcTemplateMemberRepository implements MemberRepository {
 private final JdbcTemplate jdbcTemplate;
 public JdbcTemplateMemberRepository(DataSource dataSource) {
        jdbcTemplate = new JdbcTemplate(dataSource);
    }
    @Override
 public Member save(Member member) {
 SimpleJdbcInsert jdbcInsert = new SimpleJdbcInsert(jdbcTemplate);
        jdbcInsert.withTableName("member").usingGeneratedKeyColumns("id");
 Map<String, Object> parameters = new HashMap<>();
        parameters.put("name", member.getName());
 Number key = jdbcInsert.executeAndReturnKey(new 
MapSqlParameterSource(parameters));
        member.setId(key.longValue());
 return member;
    }
    @Override
 public Optional<Member> findById(Long id) {
 List<Member> result = jdbcTemplate.query("select * from member where id 
= ?", memberRowMapper(), id);
 return result.stream().findAny();
    }
    @Override
 public List<Member> findAll() {
 return jdbcTemplate.query("select * from member", memberRowMapper());
    }
    @Override
 public Optional<Member> findByName(String name) {
 List<Member> result = jdbcTemplate.query("select * from member where 
name = ?", memberRowMapper(), name);
 return result.stream().findAny();
    }
 private RowMapper<Member> memberRowMapper() {
 return (rs, rowNum) -> {
 Member member = new Member();
            member.setId(rs.getLong("id"));
            member.setName(rs.getString("name"));
 return member;
        };
    }
 }

package hello.hellospring;
 **
 import hello.hellospring.repository.JdbcMemberRepository;
 import hello.hellospring.repository.JdbcTemplateMemberRepository;
 import hello.hellospring.repository.MemberRepository;
 import hello.hellospring.repository.MemoryMemberRepository;
 import hello.hellospring.service.MemberService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import javax.sql.DataSource;
 @Configuration
 public class SpringConfig {
 private final DataSource dataSource;
public SpringConfig(DataSource dataSource) {
 this.dataSource = dataSource;
    }
    @Bean
 public MemberService memberService() {
 return new MemberService(memberRepository());
    }
    @Bean
 public MemberRepository memberRepository() {
 // return new MemoryMemberRepository();
 // return new JdbcMemberRepository(dataSource);
 return new JdbcTemplateMemberRepository(dataSource);
 }    

dependencies {
 implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
 implementation 'org.springframework.boot:spring-boot-starter-web'
 // implementation 'org.springframework.boot:spring-boot-starter-jdbc'
 implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
 runtimeOnly 'com.h2database:h2'
 testImplementation('org.springframework.boot:spring-boot-starter-test') {
 exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
 }
 }

spring.datasource.url=jdbc:h2:tcp://localhost/~/test
 spring.datasource.driver-class-name=org.h2.Driver
 spring.datasource.username=sa
 spring.jpa.show-sql=true
 spring.jpa.hibernate.ddl-auto=none

package hello.hellospring.domain;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
 import javax.persistence.GenerationType;
 import javax.persistence.Id;
 @Entity
 public class Member {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
 private Long id;
 private String name;
 public Long getId() {
 return id;
    }
 public void setId(Long id) {
 this.id = id;
    }
 public String getName() {
    }
 return name;
 public void setName(String name) {
 this.name = name;
    }
 }

package hello.hellospring.repository;
 import hello.hellospring.domain.Member;
 import javax.persistence.EntityManager;
 import java.util.List;
 import java.util.Optional;
 public class JpaMemberRepository implements MemberRepository {
 private final EntityManager em;
 public JpaMemberRepository(EntityManager em) {
 this.em = em;
    }
 public Member save(Member member) {
        em.persist(member);
 return member;
    }
 public Optional<Member> findById(Long id) {
 Member member = em.find(Member.class, id);
 return Optional.ofNullable(member);
    }
 public List<Member> findAll() {
 return em.createQuery("select m from Member m", Member.class)
                .getResultList();
    }
public Optional<Member> findByName(String name) {
 List<Member> result = em.createQuery("select m from Member m where 
m.name = :name", Member.class)
                .setParameter("name", name)
                .getResultList();
 return result.stream().findAny();
    }
 }

 import org.springframework.transaction.annotation.Transactional
 @Transactional
 public class MemberService {}

 package hello.hellospring;
 **
 import hello.hellospring.repository.*;
 import hello.hellospring.service.MemberService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import javax.persistence.EntityManager;
 import javax.sql.DataSource;
 @Configuration
 public class SpringConfig {
 private final DataSource dataSource;
 private final EntityManager em;
 public SpringConfig(DataSource dataSource, EntityManager em) {
 this.dataSource = dataSource;
this.em = em;
    }
    @Bean
 public MemberService memberService() {
 return new MemberService(memberRepository());
    }
 @Bean
 public MemberRepository memberRepository() {
// return new MemoryMemberRepository();
// return new JdbcMemberRepository(dataSource);
 // return new JdbcTemplateMemberRepository(dataSource);
 return new JpaMemberRepository(em);
    }
 }

package hello.hellospring.repository;
 import hello.hellospring.domain.Member;
 import org.springframework.data.jpa.repository.JpaRepository;
 import java.util.Optional;
 public interface SpringDataJpaMemberRepository extends JpaRepository<Member, 
Long>, MemberRepository {
 Optional<Member> findByName(String name);
 }

package hello.hellospring;
 **
 import hello.hellospring.repository.*;
 import hello.hellospring.service.MemberService;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 @Configuration
 public class SpringConfig {
 private final MemberRepository memberRepository;
 public SpringConfig(MemberRepository memberRepository) {
 this.memberRepository = memberRepository;
    }
    @Bean
 public MemberService memberService() {
 return new MemberService(memberRepository);
    }
 }

